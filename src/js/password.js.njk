---
permalink: js/password.js
---
/**
 * Get a list of random chars in a range lower to upper
 *
 * @param {int} lower
 * @param {int} upper
 * @param {int} quantity
 * @return {string[]} list of random chars in the range specified
 */
function genRangeChar(lower, upper, quantity) {
	return Array.from({length: quantity}, () => String.fromCharCode(getRandomInt(lower, upper)))
}
/**
 * Get a list of random words from a list of words
 *
 * @param {string[]} list a list of words to choose from
 * @param {int} quantity
 * @return {string[]} list of random words
 */
function wordsFromList(list, quantity) {
	const words = []
	for (let index = 0; index < quantity; index += 1) {
		words.push(list[getRandomInt(0, list.length)])
	}
	return words
}
/**
 * Get a list of random words from an online words-list
 *
 * @param {string} listSize an online file containing words
 * @param {int} quantity
 * @return {string[]} list of random words
 */
async function generateWords(listSize, quantity) {
	return wordsFromList(await grabFile(listSize),  quantity)
}
/**
 * Get a .txt file from resources/
 *
 * @param {string} listSize
 * @return {promise} file
 */
async function grabFile(listSize) {
	return new Promise(function (resolve, _reject) {
		const rawFile = new XMLHttpRequest()
		rawFile.open("GET", "resources/" + listSize + ".txt")
		rawFile.onload = function () {
			resolve(rawFile.responseText.split("\n"))
		}
		rawFile.send(null)
	})
}
/**
 * Try and get the value for an element. If it fails, return the default value
 *
 * @param {string} elementId
 * @param {const} def
 * @return {var} value
 */
function grabValue(elementId, def) {
	let value = def
	try {
		value = document.getElementById(elementId).value.replace(/\s/g, "")
	} catch (error) {}
	return value
}
/**
 * Try and get the boolean value for an element. If it fails, return the default
 * value
 *
 * @param {string} elementId
 * @param {boolean} def
 * @return {boolean} boolean value
 */
function grabBool(elementId, def) {
	let bool = def
	try {
		bool = document.getElementById(elementId).checked
	} catch (error) {}
	return bool
}
/**
 * Calculate the shannon entropy * length for a given password
 *
 * @param {string} password
 * @return {double} strength
 */
function calcPasswordStrength(password) {
	const frequencies = password.split("").reduce(function (carry, current) {
		carry[current] = (carry[current] || 0) + 1
		return carry
	}, {})
	const entropy = Object.keys(frequencies).reduce(function (carry, current) {
		const p = frequencies[current] / password.length
		carry = carry - (Math.log(p) / Math.log(2)) * p
		return carry
	}, 0)
	return entropy * password.length
}

async function getWords(
	num_words_def = 2,
	wordlist_def = "10k",
	is_customw_def = false,
){
	const num_words = grabValue("words", num_words_def)
	const wordlist = grabValue("wordlist", wordlist_def)
	const is_customwl = grabBool("customwl", is_customw_def)
	let words = wordsFromList(await grabFile(wordlist),  num_words)
	if (is_customwl) {
		words = wordsFromList(document.getElementById("list").value.split("\n"), num_words)
	}
	return words
}

/**
 * Entry point to generate a password
 */
async function new_complex() { // eslint-disable-line no-unused-vars
	everything = generate(
		await getWords(),
		grabValue("numbers", 2),
		grabValue("symbols", 2),
		grabValue("ascii", 0),
		grabBool("uppercase", true),
		grabBool("shuffle", false),
	)
	const password = everything.join("")
	document.getElementById("output").value = password
	document.getElementById("password-strength").value = calcPasswordStrength(password)
}
/**
 * Entry point to generate a password
 */
async function new_no_special() { // eslint-disable-line no-unused-vars
	everything = generate(
		await getWords(),
		grabValue("numbers", 2),
		grabValue("symbols", 0),
		grabValue("ascii", 0),
		grabBool("uppercase", true),
		grabBool("shuffle", false),
	)
	const password = everything.join("")
	document.getElementById("output").value = password
	document.getElementById("password-strength").value = calcPasswordStrength(password)
}
/**
 * Entry point to generate a password
 */
async function new_four_words() { // eslint-disable-line no-unused-vars
	everything = generate(
		await getWords(4),
		grabValue("numbers", 0),
		grabValue("symbols", 0),
		grabValue("ascii", 0),
		grabBool("uppercase", false),
		grabBool("shuffle", false),
	)
	const password = everything.join("-")
	document.getElementById("output").value = password
	document.getElementById("password-strength").value = calcPasswordStrength(password)
}

/**
 *
 * @param {string[]} words
 * @param {int} num_numbers
 * @param {int} num_symbols
 * @param {int} num_ascii
 * @param {bool} is_uppercase
 * @param {bool} is_shuffle
 * @returns {string[]} words
 */
function generate(
	words,
	num_numbers=2,
	num_symbols=2,
	num_ascii=0,
	is_uppercase=true,
	is_shuffle=false,
) {
	const numbers = Array.from({length: num_numbers}, () => Math.floor(Math.random() * 10).toString())
	const symbols = genRangeChar(33, 44, num_symbols)
	const ascii = genRangeChar(33, 127, num_ascii)

	if (is_uppercase) {
		words = words.map(x => x.charAt(0).toUpperCase() + x.slice(1))
	}
	let everything = [].concat(words, numbers, symbols, ascii)
	if (is_shuffle) {
		for (let index = everything.length - 1; index > 0; index--) {
			const swap = getRandomInt(0, everything.length)
			;[everything[index], everything[swap]] = [everything[swap], everything[index]]
		}
	}
	return everything;
}
/**
 * open a custom wordlist
 */
function openWordlist() { // eslint-disable-line no-unused-vars
	openfiles(document.getElementById("files").files, ["list"])
}
/**
 * Entry point to check a password
 */
function check() { // eslint-disable-line no-unused-vars
	document.getElementById("password-strength").value = calcPasswordStrength(grabValue("input", ""))
}

const MAX_FILE_SIZE = 1024 * 1024 * 4
/**
 * Open the system file selector and open a stream of chars with a filename
for each file
 * @param {blob[]} files
 * @param {string[]} targets
 * @return {string[]} fileNames
 */
function openfiles(files, targets) {
	const output = []
	for (let index = 0; index < files.length; index++) {
		const file = files[index]
		const reader = new FileReader()
		reader.readAsText(file, "UTF-8")
		reader.onload = function (event) {
			const fileContents = event.target.result
			if (fileContents.length < MAX_FILE_SIZE) {
				document.getElementById(targets[index]).value = fileContents
			} else {
				window.alert("File must be smaller than 1MB")
			}
		}
		output.push(file.name)
	}
	return output
}
/**
 * Copy the contents of the output element
 * @return {void}
 */
async function copy() { // eslint-disable-line no-unused-vars
	let output = document.getElementById("output")
	output.select()
  	output.setSelectionRange(0, 99999) /* For mobile devices */
	if (navigator.clipboard) {
		try {
			await navigator.clipboard.writeText(output.value)
		} catch (err) {
			window.alert("Failed to Copy: " + err)
		}
	}
	return
}
/**
 * Returns a random integer between min (inclusive) and max (exclusive)
 * @param {int} min minimum int inclusive
 * @param {int} max maximum int exclusive
 * @return {int} random number
 */
function getRandomInt(min, max) {
	let rand = window.crypto.getRandomValues(new Uint8Array(1)) / 256
	return Math.floor(rand * (max - min)) + min
}
